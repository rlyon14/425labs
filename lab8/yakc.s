; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	35
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	38
	; >>>>> YKTickCount++; 
	inc	word [YKTickCount]
	; >>>>> Line:	40
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	41
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> tempNext = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	43
	; >>>>> (temp->taskDelay)--; 
	mov	si, word [bp-2]
	add	si, 4
	dec	word [si]
	; >>>>> Line:	44
	; >>>>> if (temp->taskDelay <= 0){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_6
	; >>>>> Line:	45
	; >>>>> YKremoveUnsorted(temp, &blockedHead, &blockedTail); 
	mov	ax, blockedTail
	push	ax
	mov	ax, blockedHead
	push	ax
	push	word [bp-2]
	call	YKremoveUnsorted
	add	sp, 6
	; >>>>> Line:	46
	; >>>>> YKinsertSorted(temp, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
L_yakc_6:
	; >>>>> Line:	48
	; >>>>> if (tempNext != 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_7
	; >>>>> Line:	49
	; >>>>> temp = tempNext; 
	mov	word [bp-2], ax
	jmp	L_yakc_8
L_yakc_7:
	; >>>>> Line:	51
	; >>>>> else break; 
	jmp	L_yakc_5
L_yakc_8:
L_yakc_4:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_3
L_yakc_5:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_2
	ALIGN	2
YKkeypress:
	; >>>>> Line:	55
	; >>>>> void YKkeypress(void){ 
	jmp	L_yakc_10
L_yakc_11:
	; >>>>> Line:	57
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_10:
	push	bp
	mov	bp, sp
	jmp	L_yakc_11
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	60
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	62
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	63
	; >>>>> etemp = &YKevents[YKeventCount]; 
	mov	ax, word [YKeventCount]
	mov	cx, 6
	imul	cx
	add	ax, YKevents
	mov	word [bp-2], ax
	; >>>>> Line:	64
	; >>>>> etemp->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	65
	; >>>>> etemp->pendHead = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	66
	; >>>>> etemp->pendTail = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	67
	; >>>>> YKeventCount++; 
	inc	word [YKeventCount]
	; >>>>> Line:	68
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_15
	; >>>>> Line:	69
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_15:
	; >>>>> Line:	71
	; >>>>> return etemp; 
	mov	ax, word [bp-2]
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_14
	ALIGN	2
YKEventPend:
	; >>>>> Line:	74
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	77
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	78
	; >>>>> tempMask = eventMask & (event->value); 
	mov	ax, word [bp+6]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	79
	; >>>>> if (waitMode == 1){ 
	cmp	word [bp+8], 1
	jne	L_yakc_20
	; >>>>> Line:	80
	; >>>>> if (tempMask > 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yakc_21
	; >>>>> Line:	81
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	82
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_22
L_yakc_21:
	jmp	L_yakc_23
L_yakc_20:
	; >>>>> Line:	86
	; >>>>> if (tempMask == eventMask) { 
	mov	ax, word [bp+6]
	cmp	ax, word [bp-2]
	jne	L_yakc_24
	; >>>>> Line:	87
	; >>>>> emp->eventWait 
	call	YKExitMutex
	; >>>>> Line:	88
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_22
L_yakc_24:
L_yakc_23:
	; >>>>> Line:	92
	; >>>>> if (readyHead != 0){ 
	mov	ax, word [readyHead]
	test	ax, ax
	je	L_yakc_25
	; >>>>> Line:	93
	; >>>>> item = YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	94
	; >>>>> YKinsertUnsorted(item, &(event->pendHead), &(event->pendTail)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-4]
	call	YKinsertUnsorted
	add	sp, 6
	; >>>>> Line:	95
	; >>>>> item->eventWaitMode = waitMode; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	96
	; >>>>> item->eventMask = eventMask; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	97
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_25:
	; >>>>> Line:	99
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	100
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_22:
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_19
	ALIGN	2
YKEventSet:
	; >>>>> Line:	103
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_27
L_yakc_28:
	; >>>>> Line:	106
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	107
	; >>>>> event->value = event->value | eventMask; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	108
	; >>>>> temp = event->pendHead; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	109
	; >>>>> while (temp != 0){ 
	jmp	L_yakc_30
L_yakc_29:
	; >>>>> Line:	110
	; >>>>> if (temp->eventWait 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_32
	; >>>>> Line:	111
	; >>>>> if (temp->eventMask != (temp->eventMask & event->value)){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	si, word [bp-2]
	add	si, 12
	mov	dx, word [si]
	cmp	dx, ax
	je	L_yakc_33
	; >>>>> Line:	112
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	113
	; >>>>> continue; 
	jmp	L_yakc_30
L_yakc_33:
	jmp	L_yakc_34
L_yakc_32:
	; >>>>> Line:	117
	; >>>>> if ((temp->eventMask & event->value) == 0){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	jne	L_yakc_35
	; >>>>> Line:	118
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	119
	; >>>>> continue; 
	jmp	L_yakc_30
L_yakc_35:
L_yakc_34:
	; >>>>> Line:	122
	; >>>>> tempNext = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	123
	; >>>>> YKremoveUnsorted(temp, &(event->pendHead), &(event->pendTail)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-2]
	call	YKremoveUnsorted
	add	sp, 6
	; >>>>> Line:	124
	; >>>>> YKinsertSorted(temp, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	125
	; >>>>> temp = tempNext; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
L_yakc_30:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_29
L_yakc_31:
	; >>>>> Line:	127
	; >>>>> if (YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_36
	; >>>>> Line:	128
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_36:
	; >>>>> Line:	130
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_27:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_28
	ALIGN	2
YKEventReset:
	; >>>>> Line:	133
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	134
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	135
	; >>>>> event- 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [si], ax
	; >>>>> Line:	136
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	jmp	L_yakc_39
	ALIGN	2
YKQCreate:
	; >>>>> Line:	140
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yakc_41
L_yakc_42:
	; >>>>> Line:	142
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	143
	; >>>>> qtemp = &YKqueues[YKqueueCount]; 
	mov	ax, word [YKqueueCount]
	mov	cx, 14
	imul	cx
	add	ax, YKqueues
	mov	word [bp-2], ax
	; >>>>> Line:	144
	; >>>>> qtemp->nextEmpty = (int*)start; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	145
	; >>>>> qtemp->oldest = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	146
	; >>>>> qtemp->qSize = size; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	147
	; >>>>> qtemp->qCount = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	148
	; >>>>> qtemp->qStart = (int*)start; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	149
	; >>>>> qtemp->qEnd = ((int*)start)+(size-1); 
	mov	ax, word [bp+6]
	dec	ax
	shl	ax, 1
	add	ax, word [bp+4]
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	150
	; >>>>> qtemp->qBlockedHead = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	151
	; >>>>> YKqueueCount++; 
	inc	word [YKqueueCount]
	; >>>>> Line:	152
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_43
	; >>>>> Line:	153
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_43:
	; >>>>> Line:	155
	; >>>>> return qtemp; 
	mov	ax, word [bp-2]
L_yakc_44:
	mov	sp, bp
	pop	bp
	ret
L_yakc_41:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_42
	ALIGN	2
YKQPend:
	; >>>>> Line:	158
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	162
	; >>>>> if (queue->oldest == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_48
	; >>>>> Line:	163
	; >>>>> item = YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	164
	; >>>>> YKinsertSorted(item, &(queue->qBlockedHead)); 
	mov	ax, word [bp+4]
	add	ax, 12
	push	ax
	push	word [bp-4]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	165
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_48:
	; >>>>> Line:	167
	; >>>>> retMSG = (void*) *(queue->oldest); 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	168
	; >>>>> (queue->oldest)++; 
	mov	si, word [bp+4]
	add	si, 2
	add	word [si], 2
	; >>>>> Line:	169
	; >>>>> queue->qCount--; 
	mov	si, word [bp+4]
	add	si, 10
	dec	word [si]
	; >>>>> Line:	170
	; >>>>> if (queue->qCount <= 0){ 
	mov	si, word [bp+4]
	add	si, 10
	cmp	word [si], 0
	jg	L_yakc_49
	; >>>>> Line:	171
	; >>>>> queue->oldest = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	jmp	L_yakc_50
L_yakc_49:
	; >>>>> Line:	173
	; >>>>> else if ((queue->oldest) > (queue->qEnd)){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jae	L_yakc_51
	; >>>>> Line:	174
	; >>>>> queue->oldest = queue->qStart; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_51:
L_yakc_50:
	; >>>>> Line:	176
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	177
	; >>>>> return (void*)retMSG; 
	mov	ax, word [bp-2]
L_yakc_52:
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_47
	ALIGN	2
YKQPost:
	; >>>>> Line:	180
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_54
L_yakc_55:
	; >>>>> Line:	182
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	183
	; >>>>> if ((queue->qCount) >= (queue->qSize)){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_56
	; >>>>> Line:	184
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	185
	; >>>>> nt = 0; 
	xor	ax, ax
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	187
	; >>>>> if((queue->qCount) <= 0){ 
	mov	si, word [bp+4]
	add	si, 10
	cmp	word [si], 0
	jg	L_yakc_58
	; >>>>> Line:	188
	; >>>>> queue->oldest = queue->nextEmpty; 
	mov	si, word [bp+4]
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_58:
	; >>>>> Line:	190
	; >>>>> *(queue->nextEmpty) = (int) msg; 
	mov	si, word [bp+4]
	mov	si, word [si]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	191
	; >>>>> queue->qCount++; 
	mov	si, word [bp+4]
	add	si, 10
	inc	word [si]
	; >>>>> Line:	192
	; >>>>> (queue->nextEmpty)++; 
	mov	si, word [bp+4]
	add	word [si], 2
	; >>>>> Line:	193
	; >>>>> if ((queue->nextEmpty) > (queue->qEnd)){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jbe	L_yakc_59
	; >>>>> Line:	194
	; >>>>> queue->nextEmpty = queue->qStart; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_59:
	; >>>>> Line:	196
	; >>>>> item = YKpopSorted(&(queue->qBlockedHead)); 
	mov	ax, word [bp+4]
	add	ax, 12
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	197
	; >>>>> YKinsertSorted(item, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	198
	; >>>>> if (YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_60
	; >>>>> Line:	199
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_60:
	; >>>>> Line:	201
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	202
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_57:
	mov	sp, bp
	pop	bp
	ret
L_yakc_54:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_55
	ALIGN	2
YKInitialize:
	; >>>>> Line:	206
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_62
L_yakc_63:
	; >>>>> Line:	207
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	208
	; >>>>> YKsave = 0; 
	mov	word [YKsave], 0
	; >>>>> Line:	209
	; >>>>> YKrestore = 0; 
	mov	word [YKrestore], 0
	; >>>>> Line:	210
	; >>>>> YKTickCount = 0; 
	mov	word [YKTickCount], 0
	; >>>>> Line:	211
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	212
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	213
	; >>>>> YKRunFlag = 0; 
	mov	word [YKRunFlag], 0
	; >>>>> Line:	214
	; >>>>> YKtaskCount = 0; 
	mov	word [YKtaskCount], 0
	; >>>>> Line:	215
	; >>>>> readyHead = 0; 
	mov	word [readyHead], 0
	; >>>>> Line:	216
	; >>>>> blockedHead = 0; 
	mov	word [blockedHead], 0
	; >>>>> Line:	217
	; >>>>> blockedTail = 0; 
	mov	word [blockedTail], 0
	; >>>>> Line:	218
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	219
	; >>>>> YKeventCount = 0; 
	mov	word [YKeventCount], 0
	; >>>>> Line:	220
	; >>>>> YKsemCount = 0; 
	mov	word [YKsemCount], 0
	; >>>>> Line:	221
	; >>>>> YKIsrDepth = 0; 
	mov	word [YKIsrDepth], 0
	; >>>>> Line:	222
	; >>>>> YKsemCount = 0; 
	mov	word [YKsemCount], 0
	; >>>>> Line:	223
	; >>>>> YKqueueCount = 0; 
	mov	word [YKqueueCount], 0
	; >>>>> Line:	224
	; >>>>> YKNewTask(&YKIdleTask, &YKIdleStk[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_62:
	push	bp
	mov	bp, sp
	jmp	L_yakc_63
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	227
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_65
L_yakc_66:
	; >>>>> Line:	228
	; >>>>> while(1){ 
	jmp	L_yakc_68
L_yakc_67:
	; >>>>> Line:	229
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	230
	; >>>>> YKIdleVar++; 
	inc	word [YKIdleVar]
	; >>>>> Line:	231
	; >>>>> YKIdleVar--; 
	dec	word [YKIdleVar]
L_yakc_68:
	jmp	L_yakc_67
L_yakc_69:
	mov	sp, bp
	pop	bp
	ret
L_yakc_65:
	push	bp
	mov	bp, sp
	jmp	L_yakc_66
	ALIGN	2
YKNewTask:
	; >>>>> Line:	235
	; >>>>> void YKNewTask(void (*task)(void), int *taskStack, unsigned char priority){ 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	239
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	240
	; >>>>> tempSP = taskStack-1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp-4], ax
	; >>>>> Line:	241
	; >>>>> *tempSP = 0x0200 
	mov	si, word [bp-4]
	mov	word [si], 512
	; >>>>> Line:	242
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	243
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	244
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	245
	; >>>>> *tempSP = (int)task; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	246
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	247
	; >>>>> *tempSP = (int)(taskStack-1); 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	si, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	248
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	249
	; >>>>> for(k = 0; k <=7; k++){ 
	mov	word [bp-6], 0
	jmp	L_yakc_74
L_yakc_73:
	; >>>>> Line:	250
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	251
	; >>>>> tempSP--; 
	sub	word [bp-4], 2
L_yakc_76:
	inc	word [bp-6]
L_yakc_74:
	cmp	word [bp-6], 7
	jle	L_yakc_73
L_yakc_75:
	; >>>>> Line:	255
	; >>>>> tempTask = &YKtasks[YKtaskCount]; 
	mov	ax, word [YKtaskCount]
	mov	cx, 14
	imul	cx
	add	ax, YKtasks
	mov	word [bp-2], ax
	; >>>>> Line:	256
	; >>>>> tempTask->taskSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	si, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	257
	; >>>>> tempTask->taskPriority = priority; 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	258
	; >>>>> tempTask->taskDelay = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	259
	; >>>>> tempTask->eventWaitMode = 1; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 1
	; >>>>> Line:	260
	; >>>>> tempTask->eventMask = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	262
	; >>>>> YKtaskCount++; 
	inc	word [YKtaskCount]
	; >>>>> Line:	263
	; >>>>> YKinsertSorted(tempTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	264
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_77
	; >>>>> Line:	265
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	266
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_77:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_72
L_yakc_79:
	DB	"YKRun Failed: readyHead is Null",0
	ALIGN	2
YKRun:
	; >>>>> Line:	270
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_80
L_yakc_81:
	; >>>>> Line:	271
	; >>>>> if (readyHead != 0){ 
	mov	ax, word [readyHead]
	test	ax, ax
	je	L_yakc_82
	; >>>>> Line:	272
	; >>>>> YKRunFlag = 1; 
	mov	word [YKRunFlag], 1
	; >>>>> Line:	273
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	274
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	275
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	276
	; >>>>> YKDispatcher(0); 
	xor	ax, ax
	push	ax
	call	YKDispatcher
	add	sp, 2
	jmp	L_yakc_83
L_yakc_82:
	; >>>>> Line:	279
	; >>>>> printString("YKRun Failed: readyHead is Null"); 
	mov	ax, L_yakc_79
	push	ax
	call	printString
	add	sp, 2
L_yakc_83:
	mov	sp, bp
	pop	bp
	ret
L_yakc_80:
	push	bp
	mov	bp, sp
	jmp	L_yakc_81
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	283
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_85
L_yakc_86:
	; >>>>> Line:	285
	; >>>>> if (count != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_87
	; >>>>> Line:	286
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	287
	; >>>>> item = YKRunningTask; 
	mov	ax, word [YKRunningTask]
	mov	word [bp-2], ax
	; >>>>> Line:	288
	; >>>>> item->taskDelay = count; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	289
	; >>>>> YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	; >>>>> Line:	290
	; >>>>> YKinsertUnsorted(item, &blockedHead, &blockedTail); 
	mov	ax, blockedTail
	push	ax
	mov	ax, blockedHead
	push	ax
	push	word [bp-2]
	call	YKinsertUnsorted
	add	sp, 6
	; >>>>> Line:	291
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	292
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_87:
	mov	sp, bp
	pop	bp
	ret
L_yakc_85:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_86
	ALIGN	2
YKExitISR:
	; >>>>> Line:	296
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	297
	; >>>>> YKIsrDepth--; 
	dec	word [YKIsrDepth]
	; >>>>> Line:	298
	; >>>>> if(YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_91
	; >>>>> Line:	299
	; >>>>> = &YKsem 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_91:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	jmp	L_yakc_90
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	303
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_93
L_yakc_94:
	; >>>>> Line:	304
	; >>>>> YKIsrDepth++; 
	inc	word [YKIsrDepth]
	; >>>>> Line:	305
	; >>>>> if (YKIsrDepth == 1){ 
	cmp	word [YKIsrDepth], 1
	jne	L_yakc_95
	; >>>>> Line:	306
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	307
	; >>>>> YKsaveSP(); 
	call	YKsaveSP
L_yakc_95:
	mov	sp, bp
	pop	bp
	ret
L_yakc_93:
	push	bp
	mov	bp, sp
	jmp	L_yakc_94
	ALIGN	2
YKScheduler:
	; >>>>> Line:	311
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_97
L_yakc_98:
	; >>>>> Line:	312
	; >>>>> if (YKRunningTask != readyHead){ 
	mov	ax, word [readyHead]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_99
	; >>>>> Line:	313
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	314
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	315
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	316
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	317
	; >>>>> YKDispatcher(saveContext); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_99:
	mov	sp, bp
	pop	bp
	ret
L_yakc_97:
	push	bp
	mov	bp, sp
	jmp	L_yakc_98
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	322
	; >>>>> YKSEM* YKSemCreate(int initialValue, char *string){ 
	jmp	L_yakc_101
L_yakc_102:
	; >>>>> Line:	324
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	325
	; >>>>> if (initialValue < 0){ 
	cmp	word [bp+4], 0
	jge	L_yakc_103
	; >>>>> Line:	326
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_104
L_yakc_103:
	; >>>>> Line:	328
	; >>>>> tempSem = &YKsem 
	mov	ax, word [YKsemCount]
	mov	cx, 6
	imul	cx
	add	ax, YKsemaphores
	mov	word [bp-2], ax
	; >>>>> Line:	329
	; >>>>> tempSem->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	330
	; >>>>> tempSem->pendHead = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	331
	; >>>>> tempSem->string = string; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	332
	; >>>>> YKsemCount++; 
	inc	word [YKsemCount]
	; >>>>> Line:	333
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_105
	; >>>>> Line:	334
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_105:
	; >>>>> Line:	336
	; >>>>> return tempSem; 
	mov	ax, word [bp-2]
L_yakc_104:
	mov	sp, bp
	pop	bp
	ret
L_yakc_101:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_102
	ALIGN	2
YKSemPend:
	; >>>>> Line:	339
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_107
L_yakc_108:
	; >>>>> Line:	342
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	343
	; >>>>> value = semaphore->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	344
	; >>>>> (semaphore->value)--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	345
	; >>>>> if (value <= 0){ 
	cmp	word [bp-2], 0
	jg	L_yakc_109
	; >>>>> Line:	346
	; >>>>> item = YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	347
	; >>>>> YKinsertSorted(item, &(semaphore->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-4]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	348
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_109:
	; >>>>> Line:	350
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_107:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_108
	ALIGN	2
YKSemPost:
	; >>>>> Line:	353
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_111
L_yakc_112:
	; >>>>> Line:	355
	; >>>>> ne 
	call	YKEnterMutex
	; >>>>> Line:	356
	; >>>>> (semaphore->value)++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	357
	; >>>>> if ((semaphore->pendHead) != 0) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_113
	; >>>>> Line:	358
	; >>>>> item = YKpopSorted(&(semaphore->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	359
	; >>>>> YKinsertSorted(item, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	360
	; >>>>> if (YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_114
	; >>>>> Line:	361
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_114:
L_yakc_113:
	; >>>>> Line:	364
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_111:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_112
	ALIGN	2
YKinsertSorted:
	; >>>>> Line:	368
	; >>>>> void YKinsertSorted(struct Task* item, struct Task** listHead){ 
	jmp	L_yakc_116
L_yakc_117:
	; >>>>> Line:	371
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_118
	; >>>>> Line:	372
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	373
	; >>>>> if ((*listHead) == 0){ 
	mov	si, word [bp+6]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_119
	; >>>>> Line:	374
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	375
	; >>>>> *listHead = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_120
L_yakc_119:
	; >>>>> Line:	377
	; >>>>> else if (((*listHead)->taskPriority) >= (item->taskPriority)){ 
	mov	si, word [bp+6]
	mov	si, word [si]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	ja	L_yakc_121
	; >>>>> Line:	378
	; >>>>> item->ne 
	mov	si, word [bp+6]
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	379
	; >>>>> *listHead = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_122
L_yakc_121:
	; >>>>> Line:	382
	; >>>>> temp = *listHead; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	383
	; >>>>> tempNext = (*listHead)->next; 
	mov	si, word [bp+6]
	mov	si, word [si]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	384
	; >>>>> while (tempNext != 0) { 
	jmp	L_yakc_124
L_yakc_123:
	; >>>>> Line:	385
	; >>>>> if ((tempNext->taskPriority) > (item->taskPriority)) { 
	mov	si, word [bp-4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_yakc_126
	; >>>>> Line:	386
	; >>>>> item->next = tempNext; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	387
	; >>>>> temp->next = item; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	388
	; >>>>> return; 
	jmp	L_yakc_127
L_yakc_126:
	; >>>>> Line:	390
	; >>>>> temp = tempNext; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	; >>>>> Line:	391
	; >>>>> tempNext = tempNext->next; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_124:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_123
L_yakc_125:
	; >>>>> Line:	393
	; >>>>> temp->next = item; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	394
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_122:
L_yakc_120:
L_yakc_118:
L_yakc_127:
	mov	sp, bp
	pop	bp
	ret
L_yakc_116:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_117
	ALIGN	2
YKpopSorted:
	; >>>>> Line:	399
	; >>>>> struct Task* YKpopSorted (struct Task** listHead){ 
	jmp	L_yakc_129
L_yakc_130:
	; >>>>> Line:	401
	; >>>>> if (*listHead != 0) { 
	mov	si, word [bp+4]
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_131
	; >>>>> Line:	402
	; >>>>> temp = *listHead; 
	mov	word [bp-2], ax
	; >>>>> Line:	403
	; >>>>> *listHead = (*listHead)->next 
	mov	si, word [bp+4]
	mov	si, word [si]
	add	si, 6
	mov	di, word [bp+4]
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	404
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	405
	; >>>>> return temp; 
	mov	ax, word [bp-2]
	jmp	L_yakc_132
	jmp	L_yakc_133
L_yakc_131:
	; >>>>> Line:	408
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_133:
L_yakc_132:
	mov	sp, bp
	pop	bp
	ret
L_yakc_129:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_130
	ALIGN	2
YKremoveUnsorted:
	; >>>>> Line:	412
	; >>>>> void YKremoveUnsorted (struct Task* item, struct Task** listHead, struct Task** listTail){ 
	jmp	L_yakc_135
L_yakc_136:
	; >>>>> Line:	413
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_137
	; >>>>> Line:	415
	; >>>>> if (item->prev != 0) { 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_138
	; >>>>> Line:	416
	; >>>>> (item->prev)->next = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_139
L_yakc_138:
	; >>>>> Line:	419
	; >>>>> *listHead = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+6]
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_139:
	; >>>>> Line:	421
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_140
	; >>>>> Line:	422
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_141
L_yakc_140:
	; >>>>> Line:	425
	; >>>>> *listTail = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+8]
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_141:
L_yakc_137:
	mov	sp, bp
	pop	bp
	ret
L_yakc_135:
	push	bp
	mov	bp, sp
	jmp	L_yakc_136
	ALIGN	2
YKinsertUnsorted:
	; >>>>> Line:	430
	; >>>>> void YKinsertUnsorted(struct Task* item, struct Task** listHead, struct Task** listTail){ 
	jmp	L_yakc_143
L_yakc_144:
	; >>>>> Line:	431
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_145
	; >>>>> Line:	432
	; >>>>> if (*listTai 
	mov	si, word [bp+8]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_146
	; >>>>> Line:	433
	; >>>>> *listHead = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	434
	; >>>>> *listTail = item; 
	mov	si, word [bp+8]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	435
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	436
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_147
L_yakc_146:
	; >>>>> Line:	439
	; >>>>> (*listTail)->next = item; 
	mov	si, word [bp+8]
	mov	si, word [si]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> item->prev = *listTail; 
	mov	si, word [bp+8]
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	441
	; >>>>> *listTail = item; 
	mov	si, word [bp+8]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	442
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_147:
L_yakc_145:
	mov	sp, bp
	pop	bp
	ret
L_yakc_143:
	push	bp
	mov	bp, sp
	jmp	L_yakc_144
	ALIGN	2
YKTickCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKsave:
	TIMES	2 db 0
YKrestore:
	TIMES	2 db 0
YKqueueCount:
	TIMES	2 db 0
YKsemCount:
	TIMES	2 db 0
YKtaskCount:
	TIMES	2 db 0
YKeventCount:
	TIMES	2 db 0
YKRunFlag:
	TIMES	2 db 0
YKIsrDepth:
	TIMES	2 db 0
YKIdleVar:
	TIMES	2 db 0
readyHead:
	TIMES	2 db 0
blockedHead:
	TIMES	2 db 0
blockedTail:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKtasks:
	TIMES	140 db 0
YKqueues:
	TIMES	42 db 0
YKevents:
	TIMES	36 db 0
YKsemaphores:
	TIMES	60 db 0
YKIdleStk:
	TIMES	512 db 0
