        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      isr_reset ; Reset               ; Int 08h (IRQ 0)
        dd      isr_tick ; Tick                	; Int 09h (IRQ 1)
        dd      isr_keypress 			; Int 0Ah (IRQ 2)
        dd      isr_simptris_gameover 		; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      isr_simptris_newpeice 		; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      isr_simptris_recievedCmd 	; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      isr_simptris_touchdown 		; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      isr_simptris_lineclear 		; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

	align	2
SlidePiece:	; void SlidePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 0		; Slide piece operation
  	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
RotatePiece:	; void RotatePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 1		; Rotate piece operation
 	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
SeedSimptris:	; void SeedSimptris(long seed)
	push	bp
	mov	bp, sp
	push	ax
	push	cx
	push    dx
 	mov	ah, 2		; Seed operation
	mov	dx, [bp+4]	; Move loword of seed
	mov	cx, [bp+6]	; Move hiword of seed
	int	1Bh		; Call Simptris services
	pop	dx
	pop	cx
	pop	ax
	pop	bp
	ret
StartSimptris:	; void StartSimptris(void)
	push	ax
 	mov	ah, 3		; Start Simptris operation
	int	1Bh		; Call Simptris services
	pop	ax
	ret

isr_reset:
	mov	ax, 0x0
	push	ax
	call	exit
	iret
isr_keypress:
	push	bp
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	sti
	call	YKkeypress
	cli
	mov	al, 0x20
	out	0x20, al
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret
isr_tick:
	push	bp
	push	si	
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	call	YKTickHandler
	cli
	mov	al, 0x20
	out	0x20, al
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret
isr_simptris_lineclear:
	inc	word[score]
	push	ax
	mov	al, 0x20
	out	0x20, al
	pop	ax
	iret	
isr_simptris_touchdown:
	push	ax
	mov	al, 0x20
	out	0x20, al
	pop	ax
	iret	
isr_simptris_recievedCmd:
	push	bp
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	sti
	call	SMrecievedCmdHdlr
	cli
	mov	al, 0x20
	out	0x20, al
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret
isr_simptris_newpeice:
	push	bp
	push	si	
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	;sti don't nest newpeice interrupts
	call	SMnewpieceHdlr
	cli
	mov	al, 0x20
	out	0x20, al
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret	
isr_simptris_gameover:
	push	bp
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	sti
	call	SMgameOverHdlr
	cli
	mov	al, 0x20
	out	0x20, al
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret	

YKEnterMutex:
	cli
	ret
YKExitMutex:
	sti
	ret
YKsaveContext:
	cli
	pushf
	push	cs
	push	word[bp+2]
	push	word[bp]
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	mov	bx, [YKsave]
	mov	[bx], sp
	jmp	YKrestorecontext
YKDispatcher:
	push	bp
	mov	bp, sp
	push	ax
	mov	ax, [bp+4]
	cmp	ax, 1
	pop	ax
	je	YKsaveContext
YKrestorecontext:
	mov	sp, [YKrestore]
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret
YKsaveSP:
	push 	bp
	mov 	bp, sp
	add	sp, 8
	mov 	bx, [YKsave]
	mov 	[bx], sp
	sub	sp, 8
	mov 	sp, bp
	pop	bp
	ret
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	35
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	38
	; >>>>> YKTickCount++; 
	inc	word [YKTickCount]
	; >>>>> Line:	40
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	41
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> tempNext = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	43
	; >>>>> (temp->taskDelay)--; 
	mov	si, word [bp-2]
	add	si, 4
	dec	word [si]
	; >>>>> Line:	44
	; >>>>> if (temp->taskDelay <= 0){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_6
	; >>>>> Line:	45
	; >>>>> YKremoveUnsorted(temp, &blockedHead, &blockedTail); 
	mov	ax, blockedTail
	push	ax
	mov	ax, blockedHead
	push	ax
	push	word [bp-2]
	call	YKremoveUnsorted
	add	sp, 6
	; >>>>> Line:	46
	; >>>>> YKinsertSorted(temp, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
L_yakc_6:
	; >>>>> Line:	48
	; >>>>> if (tempNext != 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_7
	; >>>>> Line:	49
	; >>>>> temp = tempNext; 
	mov	word [bp-2], ax
	jmp	L_yakc_8
L_yakc_7:
	; >>>>> Line:	51
	; >>>>> else break; 
	jmp	L_yakc_5
L_yakc_8:
L_yakc_4:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_3
L_yakc_5:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_2
	ALIGN	2
YKkeypress:
	; >>>>> Line:	55
	; >>>>> void YKkeypress(void){ 
	jmp	L_yakc_10
L_yakc_11:
	; >>>>> Line:	57
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_10:
	push	bp
	mov	bp, sp
	jmp	L_yakc_11
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	60
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	62
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	63
	; >>>>> etemp = &YKevents[YKeventCount]; 
	mov	ax, word [YKeventCount]
	mov	cx, 6
	imul	cx
	add	ax, YKevents
	mov	word [bp-2], ax
	; >>>>> Line:	64
	; >>>>> etemp->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	65
	; >>>>> etemp->pendHead = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	66
	; >>>>> etemp->pendTail = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	67
	; >>>>> YKeventCount++; 
	inc	word [YKeventCount]
	; >>>>> Line:	68
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_15
	; >>>>> Line:	69
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_15:
	; >>>>> Line:	71
	; >>>>> return etemp; 
	mov	ax, word [bp-2]
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_14
	ALIGN	2
YKEventPend:
	; >>>>> Line:	74
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	77
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	78
	; >>>>> tempMask = eventMask & (event->value); 
	mov	ax, word [bp+6]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	79
	; >>>>> if (waitMode == 1){ 
	cmp	word [bp+8], 1
	jne	L_yakc_20
	; >>>>> Line:	80
	; >>>>> if (tempMask > 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yakc_21
	; >>>>> Line:	81
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	82
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_22
L_yakc_21:
	jmp	L_yakc_23
L_yakc_20:
	; >>>>> Line:	86
	; >>>>> if (tempMask == eventMask) { 
	mov	ax, word [bp+6]
	cmp	ax, word [bp-2]
	jne	L_yakc_24
	; >>>>> Line:	87
	; >>>>> emp->eventWait 
	call	YKExitMutex
	; >>>>> Line:	88
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_22
L_yakc_24:
L_yakc_23:
	; >>>>> Line:	92
	; >>>>> if (readyHead != 0){ 
	mov	ax, word [readyHead]
	test	ax, ax
	je	L_yakc_25
	; >>>>> Line:	93
	; >>>>> item = YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	94
	; >>>>> YKinsertUnsorted(item, &(event->pendHead), &(event->pendTail)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-4]
	call	YKinsertUnsorted
	add	sp, 6
	; >>>>> Line:	95
	; >>>>> item->eventWaitMode = waitMode; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	96
	; >>>>> item->eventMask = eventMask; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	97
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_25:
	; >>>>> Line:	99
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	100
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_22:
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_19
	ALIGN	2
YKEventSet:
	; >>>>> Line:	103
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_27
L_yakc_28:
	; >>>>> Line:	106
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	107
	; >>>>> event->value = event->value | eventMask; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	108
	; >>>>> temp = event->pendHead; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	109
	; >>>>> while (temp != 0){ 
	jmp	L_yakc_30
L_yakc_29:
	; >>>>> Line:	110
	; >>>>> if (temp->eventWait 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_32
	; >>>>> Line:	111
	; >>>>> if (temp->eventMask != (temp->eventMask & event->value)){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	si, word [bp-2]
	add	si, 12
	mov	dx, word [si]
	cmp	dx, ax
	je	L_yakc_33
	; >>>>> Line:	112
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	113
	; >>>>> continue; 
	jmp	L_yakc_30
L_yakc_33:
	jmp	L_yakc_34
L_yakc_32:
	; >>>>> Line:	117
	; >>>>> if ((temp->eventMask & event->value) == 0){ 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	jne	L_yakc_35
	; >>>>> Line:	118
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	119
	; >>>>> continue; 
	jmp	L_yakc_30
L_yakc_35:
L_yakc_34:
	; >>>>> Line:	122
	; >>>>> tempNext = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	123
	; >>>>> YKremoveUnsorted(temp, &(event->pendHead), &(event->pendTail)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-2]
	call	YKremoveUnsorted
	add	sp, 6
	; >>>>> Line:	124
	; >>>>> YKinsertSorted(temp, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	125
	; >>>>> temp = tempNext; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
L_yakc_30:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_29
L_yakc_31:
	; >>>>> Line:	127
	; >>>>> if (YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_36
	; >>>>> Line:	128
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_36:
	; >>>>> Line:	130
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_27:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_28
	ALIGN	2
YKEventReset:
	; >>>>> Line:	133
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	134
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	135
	; >>>>> event- 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [si], ax
	; >>>>> Line:	136
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	jmp	L_yakc_39
	ALIGN	2
YKQCreate:
	; >>>>> Line:	140
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yakc_41
L_yakc_42:
	; >>>>> Line:	142
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	143
	; >>>>> qtemp = &YKqueues[YKqueueCount]; 
	mov	ax, word [YKqueueCount]
	mov	cx, 14
	imul	cx
	add	ax, YKqueues
	mov	word [bp-2], ax
	; >>>>> Line:	144
	; >>>>> qtemp->nextEmpty = (int*)start; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	145
	; >>>>> qtemp->oldest = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	146
	; >>>>> qtemp->qSize = size; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	147
	; >>>>> qtemp->qCount = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	148
	; >>>>> qtemp->qStart = (int*)start; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	149
	; >>>>> qtemp->qEnd = ((int*)start)+(size-1); 
	mov	ax, word [bp+6]
	dec	ax
	shl	ax, 1
	add	ax, word [bp+4]
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	150
	; >>>>> qtemp->qBlockedHead = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	151
	; >>>>> YKqueueCount++; 
	inc	word [YKqueueCount]
	; >>>>> Line:	152
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_43
	; >>>>> Line:	153
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_43:
	; >>>>> Line:	155
	; >>>>> return qtemp; 
	mov	ax, word [bp-2]
L_yakc_44:
	mov	sp, bp
	pop	bp
	ret
L_yakc_41:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_42
	ALIGN	2
YKQPend:
	; >>>>> Line:	158
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	162
	; >>>>> if (queue->oldest == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_48
	; >>>>> Line:	163
	; >>>>> item = YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	164
	; >>>>> YKinsertSorted(item, &(queue->qBlockedHead)); 
	mov	ax, word [bp+4]
	add	ax, 12
	push	ax
	push	word [bp-4]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	165
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_48:
	; >>>>> Line:	167
	; >>>>> retMSG = (void*) *(queue->oldest); 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	168
	; >>>>> (queue->oldest)++; 
	mov	si, word [bp+4]
	add	si, 2
	add	word [si], 2
	; >>>>> Line:	169
	; >>>>> queue->qCount--; 
	mov	si, word [bp+4]
	add	si, 10
	dec	word [si]
	; >>>>> Line:	170
	; >>>>> if (queue->qCount <= 0){ 
	mov	si, word [bp+4]
	add	si, 10
	cmp	word [si], 0
	jg	L_yakc_49
	; >>>>> Line:	171
	; >>>>> queue->oldest = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	jmp	L_yakc_50
L_yakc_49:
	; >>>>> Line:	173
	; >>>>> else if ((queue->oldest) > (queue->qEnd)){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jae	L_yakc_51
	; >>>>> Line:	174
	; >>>>> queue->oldest = queue->qStart; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_51:
L_yakc_50:
	; >>>>> Line:	176
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	177
	; >>>>> return (void*)retMSG; 
	mov	ax, word [bp-2]
L_yakc_52:
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_47
	ALIGN	2
YKQPost:
	; >>>>> Line:	180
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_54
L_yakc_55:
	; >>>>> Line:	182
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	183
	; >>>>> if ((queue->qCount) >= (queue->qSize)){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_56
	; >>>>> Line:	184
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	185
	; >>>>> nt = 0; 
	xor	ax, ax
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	187
	; >>>>> if((queue->qCount) <= 0){ 
	mov	si, word [bp+4]
	add	si, 10
	cmp	word [si], 0
	jg	L_yakc_58
	; >>>>> Line:	188
	; >>>>> queue->oldest = queue->nextEmpty; 
	mov	si, word [bp+4]
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_58:
	; >>>>> Line:	190
	; >>>>> *(queue->nextEmpty) = (int) msg; 
	mov	si, word [bp+4]
	mov	si, word [si]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	191
	; >>>>> queue->qCount++; 
	mov	si, word [bp+4]
	add	si, 10
	inc	word [si]
	; >>>>> Line:	192
	; >>>>> (queue->nextEmpty)++; 
	mov	si, word [bp+4]
	add	word [si], 2
	; >>>>> Line:	193
	; >>>>> if ((queue->nextEmpty) > (queue->qEnd)){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jbe	L_yakc_59
	; >>>>> Line:	194
	; >>>>> queue->nextEmpty = queue->qStart; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_59:
	; >>>>> Line:	196
	; >>>>> item = YKpopSorted(&(queue->qBlockedHead)); 
	mov	ax, word [bp+4]
	add	ax, 12
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	197
	; >>>>> YKinsertSorted(item, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	198
	; >>>>> if (YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_60
	; >>>>> Line:	199
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_60:
	; >>>>> Line:	201
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	202
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_57:
	mov	sp, bp
	pop	bp
	ret
L_yakc_54:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_55
	ALIGN	2
YKInitialize:
	; >>>>> Line:	206
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_62
L_yakc_63:
	; >>>>> Line:	207
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	208
	; >>>>> YKsave = 0; 
	mov	word [YKsave], 0
	; >>>>> Line:	209
	; >>>>> YKrestore = 0; 
	mov	word [YKrestore], 0
	; >>>>> Line:	210
	; >>>>> YKTickCount = 0; 
	mov	word [YKTickCount], 0
	; >>>>> Line:	211
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	212
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	213
	; >>>>> YKRunFlag = 0; 
	mov	word [YKRunFlag], 0
	; >>>>> Line:	214
	; >>>>> YKtaskCount = 0; 
	mov	word [YKtaskCount], 0
	; >>>>> Line:	215
	; >>>>> readyHead = 0; 
	mov	word [readyHead], 0
	; >>>>> Line:	216
	; >>>>> blockedHead = 0; 
	mov	word [blockedHead], 0
	; >>>>> Line:	217
	; >>>>> blockedTail = 0; 
	mov	word [blockedTail], 0
	; >>>>> Line:	218
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	219
	; >>>>> YKeventCount = 0; 
	mov	word [YKeventCount], 0
	; >>>>> Line:	220
	; >>>>> YKsemCount = 0; 
	mov	word [YKsemCount], 0
	; >>>>> Line:	221
	; >>>>> YKIsrDepth = 0; 
	mov	word [YKIsrDepth], 0
	; >>>>> Line:	222
	; >>>>> YKsemCount = 0; 
	mov	word [YKsemCount], 0
	; >>>>> Line:	223
	; >>>>> YKqueueCount = 0; 
	mov	word [YKqueueCount], 0
	; >>>>> Line:	224
	; >>>>> YKNewTask(&YKIdleTask, &YKIdleStk[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_62:
	push	bp
	mov	bp, sp
	jmp	L_yakc_63
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	227
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_65
L_yakc_66:
	; >>>>> Line:	228
	; >>>>> while(1){ 
	jmp	L_yakc_68
L_yakc_67:
	; >>>>> Line:	229
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	230
	; >>>>> YKIdleVar++; 
	inc	word [YKIdleVar]
	; >>>>> Line:	231
	; >>>>> YKIdleVar--; 
	dec	word [YKIdleVar]
L_yakc_68:
	jmp	L_yakc_67
L_yakc_69:
	mov	sp, bp
	pop	bp
	ret
L_yakc_65:
	push	bp
	mov	bp, sp
	jmp	L_yakc_66
	ALIGN	2
YKNewTask:
	; >>>>> Line:	235
	; >>>>> void YKNewTask(void (*task)(void), int *taskStack, unsigned char priority){ 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	239
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	240
	; >>>>> tempSP = taskStack-1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp-4], ax
	; >>>>> Line:	241
	; >>>>> *tempSP = 0x0200 
	mov	si, word [bp-4]
	mov	word [si], 512
	; >>>>> Line:	242
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	243
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	244
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	245
	; >>>>> *tempSP = (int)task; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	246
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	247
	; >>>>> *tempSP = (int)(taskStack-1); 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	si, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	248
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	249
	; >>>>> for(k = 0; k <=7; k++){ 
	mov	word [bp-6], 0
	jmp	L_yakc_74
L_yakc_73:
	; >>>>> Line:	250
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	251
	; >>>>> tempSP--; 
	sub	word [bp-4], 2
L_yakc_76:
	inc	word [bp-6]
L_yakc_74:
	cmp	word [bp-6], 7
	jle	L_yakc_73
L_yakc_75:
	; >>>>> Line:	255
	; >>>>> tempTask = &YKtasks[YKtaskCount]; 
	mov	ax, word [YKtaskCount]
	mov	cx, 14
	imul	cx
	add	ax, YKtasks
	mov	word [bp-2], ax
	; >>>>> Line:	256
	; >>>>> tempTask->taskSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	si, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	257
	; >>>>> tempTask->taskPriority = priority; 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	258
	; >>>>> tempTask->taskDelay = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	259
	; >>>>> tempTask->eventWaitMode = 1; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 1
	; >>>>> Line:	260
	; >>>>> tempTask->eventMask = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	262
	; >>>>> YKtaskCount++; 
	inc	word [YKtaskCount]
	; >>>>> Line:	263
	; >>>>> YKinsertSorted(tempTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	264
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_77
	; >>>>> Line:	265
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	266
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_77:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_72
L_yakc_79:
	DB	"YKRun Failed: readyHead is Null",0
	ALIGN	2
YKRun:
	; >>>>> Line:	270
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_80
L_yakc_81:
	; >>>>> Line:	271
	; >>>>> if (readyHead != 0){ 
	mov	ax, word [readyHead]
	test	ax, ax
	je	L_yakc_82
	; >>>>> Line:	272
	; >>>>> YKRunFlag = 1; 
	mov	word [YKRunFlag], 1
	; >>>>> Line:	273
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	274
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	275
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	276
	; >>>>> YKDispatcher(0); 
	xor	ax, ax
	push	ax
	call	YKDispatcher
	add	sp, 2
	jmp	L_yakc_83
L_yakc_82:
	; >>>>> Line:	279
	; >>>>> printString("YKRun Failed: readyHead is Null"); 
	mov	ax, L_yakc_79
	push	ax
	call	printString
	add	sp, 2
L_yakc_83:
	mov	sp, bp
	pop	bp
	ret
L_yakc_80:
	push	bp
	mov	bp, sp
	jmp	L_yakc_81
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	283
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_85
L_yakc_86:
	; >>>>> Line:	285
	; >>>>> if (count != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_87
	; >>>>> Line:	286
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	287
	; >>>>> item = YKRunningTask; 
	mov	ax, word [YKRunningTask]
	mov	word [bp-2], ax
	; >>>>> Line:	288
	; >>>>> item->taskDelay = count; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	289
	; >>>>> YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	; >>>>> Line:	290
	; >>>>> YKinsertUnsorted(item, &blockedHead, &blockedTail); 
	mov	ax, blockedTail
	push	ax
	mov	ax, blockedHead
	push	ax
	push	word [bp-2]
	call	YKinsertUnsorted
	add	sp, 6
	; >>>>> Line:	291
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	292
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_87:
	mov	sp, bp
	pop	bp
	ret
L_yakc_85:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_86
	ALIGN	2
YKExitISR:
	; >>>>> Line:	296
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	297
	; >>>>> YKIsrDepth--; 
	dec	word [YKIsrDepth]
	; >>>>> Line:	298
	; >>>>> if(YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_91
	; >>>>> Line:	299
	; >>>>> = &YKsem 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_91:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	jmp	L_yakc_90
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	303
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_93
L_yakc_94:
	; >>>>> Line:	304
	; >>>>> YKIsrDepth++; 
	inc	word [YKIsrDepth]
	; >>>>> Line:	305
	; >>>>> if (YKIsrDepth == 1){ 
	cmp	word [YKIsrDepth], 1
	jne	L_yakc_95
	; >>>>> Line:	306
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	307
	; >>>>> YKsaveSP(); 
	call	YKsaveSP
L_yakc_95:
	mov	sp, bp
	pop	bp
	ret
L_yakc_93:
	push	bp
	mov	bp, sp
	jmp	L_yakc_94
	ALIGN	2
YKScheduler:
	; >>>>> Line:	311
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_97
L_yakc_98:
	; >>>>> Line:	312
	; >>>>> if (YKRunningTask != readyHead){ 
	mov	ax, word [readyHead]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_99
	; >>>>> Line:	313
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	314
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	315
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	316
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	317
	; >>>>> YKDispatcher(saveContext); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_99:
	mov	sp, bp
	pop	bp
	ret
L_yakc_97:
	push	bp
	mov	bp, sp
	jmp	L_yakc_98
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	322
	; >>>>> YKSEM* YKSemCreate(int initialValue, char *string){ 
	jmp	L_yakc_101
L_yakc_102:
	; >>>>> Line:	324
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	325
	; >>>>> if (initialValue < 0){ 
	cmp	word [bp+4], 0
	jge	L_yakc_103
	; >>>>> Line:	326
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_104
L_yakc_103:
	; >>>>> Line:	328
	; >>>>> tempSem = &YKsem 
	mov	ax, word [YKsemCount]
	mov	cx, 6
	imul	cx
	add	ax, YKsemaphores
	mov	word [bp-2], ax
	; >>>>> Line:	329
	; >>>>> tempSem->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	330
	; >>>>> tempSem->pendHead = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	331
	; >>>>> tempSem->string = string; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	332
	; >>>>> YKsemCount++; 
	inc	word [YKsemCount]
	; >>>>> Line:	333
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_105
	; >>>>> Line:	334
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_105:
	; >>>>> Line:	336
	; >>>>> return tempSem; 
	mov	ax, word [bp-2]
L_yakc_104:
	mov	sp, bp
	pop	bp
	ret
L_yakc_101:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_102
	ALIGN	2
YKSemPend:
	; >>>>> Line:	339
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_107
L_yakc_108:
	; >>>>> Line:	342
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	343
	; >>>>> value = semaphore->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	344
	; >>>>> (semaphore->value)--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	345
	; >>>>> if (value <= 0){ 
	cmp	word [bp-2], 0
	jg	L_yakc_109
	; >>>>> Line:	346
	; >>>>> item = YKpopSorted(&readyHead); 
	mov	ax, readyHead
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-4], ax
	; >>>>> Line:	347
	; >>>>> YKinsertSorted(item, &(semaphore->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-4]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	348
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_109:
	; >>>>> Line:	350
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_107:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_108
	ALIGN	2
YKSemPost:
	; >>>>> Line:	353
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_111
L_yakc_112:
	; >>>>> Line:	355
	; >>>>> ne 
	call	YKEnterMutex
	; >>>>> Line:	356
	; >>>>> (semaphore->value)++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	357
	; >>>>> if ((semaphore->pendHead) != 0) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_113
	; >>>>> Line:	358
	; >>>>> item = YKpopSorted(&(semaphore->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	call	YKpopSorted
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	359
	; >>>>> YKinsertSorted(item, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKinsertSorted
	add	sp, 4
	; >>>>> Line:	360
	; >>>>> if (YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_114
	; >>>>> Line:	361
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_114:
L_yakc_113:
	; >>>>> Line:	364
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_111:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_112
	ALIGN	2
YKinsertSorted:
	; >>>>> Line:	368
	; >>>>> void YKinsertSorted(struct Task* item, struct Task** listHead){ 
	jmp	L_yakc_116
L_yakc_117:
	; >>>>> Line:	371
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_118
	; >>>>> Line:	372
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	373
	; >>>>> if ((*listHead) == 0){ 
	mov	si, word [bp+6]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_119
	; >>>>> Line:	374
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	375
	; >>>>> *listHead = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_120
L_yakc_119:
	; >>>>> Line:	377
	; >>>>> else if (((*listHead)->taskPriority) >= (item->taskPriority)){ 
	mov	si, word [bp+6]
	mov	si, word [si]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	ja	L_yakc_121
	; >>>>> Line:	378
	; >>>>> item->ne 
	mov	si, word [bp+6]
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	379
	; >>>>> *listHead = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_122
L_yakc_121:
	; >>>>> Line:	382
	; >>>>> temp = *listHead; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	383
	; >>>>> tempNext = (*listHead)->next; 
	mov	si, word [bp+6]
	mov	si, word [si]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	384
	; >>>>> while (tempNext != 0) { 
	jmp	L_yakc_124
L_yakc_123:
	; >>>>> Line:	385
	; >>>>> if ((tempNext->taskPriority) > (item->taskPriority)) { 
	mov	si, word [bp-4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_yakc_126
	; >>>>> Line:	386
	; >>>>> item->next = tempNext; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	387
	; >>>>> temp->next = item; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	388
	; >>>>> return; 
	jmp	L_yakc_127
L_yakc_126:
	; >>>>> Line:	390
	; >>>>> temp = tempNext; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	; >>>>> Line:	391
	; >>>>> tempNext = tempNext->next; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_124:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_123
L_yakc_125:
	; >>>>> Line:	393
	; >>>>> temp->next = item; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	394
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_122:
L_yakc_120:
L_yakc_118:
L_yakc_127:
	mov	sp, bp
	pop	bp
	ret
L_yakc_116:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_117
	ALIGN	2
YKpopSorted:
	; >>>>> Line:	399
	; >>>>> struct Task* YKpopSorted (struct Task** listHead){ 
	jmp	L_yakc_129
L_yakc_130:
	; >>>>> Line:	401
	; >>>>> if (*listHead != 0) { 
	mov	si, word [bp+4]
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_131
	; >>>>> Line:	402
	; >>>>> temp = *listHead; 
	mov	word [bp-2], ax
	; >>>>> Line:	403
	; >>>>> *listHead = (*listHead)->next 
	mov	si, word [bp+4]
	mov	si, word [si]
	add	si, 6
	mov	di, word [bp+4]
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	404
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	405
	; >>>>> return temp; 
	mov	ax, word [bp-2]
	jmp	L_yakc_132
	jmp	L_yakc_133
L_yakc_131:
	; >>>>> Line:	408
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_133:
L_yakc_132:
	mov	sp, bp
	pop	bp
	ret
L_yakc_129:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_130
	ALIGN	2
YKremoveUnsorted:
	; >>>>> Line:	412
	; >>>>> void YKremoveUnsorted (struct Task* item, struct Task** listHead, struct Task** listTail){ 
	jmp	L_yakc_135
L_yakc_136:
	; >>>>> Line:	413
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_137
	; >>>>> Line:	415
	; >>>>> if (item->prev != 0) { 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_138
	; >>>>> Line:	416
	; >>>>> (item->prev)->next = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_139
L_yakc_138:
	; >>>>> Line:	419
	; >>>>> *listHead = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+6]
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_139:
	; >>>>> Line:	421
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_140
	; >>>>> Line:	422
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_141
L_yakc_140:
	; >>>>> Line:	425
	; >>>>> *listTail = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+8]
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_141:
L_yakc_137:
	mov	sp, bp
	pop	bp
	ret
L_yakc_135:
	push	bp
	mov	bp, sp
	jmp	L_yakc_136
	ALIGN	2
YKinsertUnsorted:
	; >>>>> Line:	430
	; >>>>> void YKinsertUnsorted(struct Task* item, struct Task** listHead, struct Task** listTail){ 
	jmp	L_yakc_143
L_yakc_144:
	; >>>>> Line:	431
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_145
	; >>>>> Line:	432
	; >>>>> if (*listTai 
	mov	si, word [bp+8]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_146
	; >>>>> Line:	433
	; >>>>> *listHead = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	434
	; >>>>> *listTail = item; 
	mov	si, word [bp+8]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	435
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	436
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_147
L_yakc_146:
	; >>>>> Line:	439
	; >>>>> (*listTail)->next = item; 
	mov	si, word [bp+8]
	mov	si, word [si]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> item->prev = *listTail; 
	mov	si, word [bp+8]
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	441
	; >>>>> *listTail = item; 
	mov	si, word [bp+8]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	442
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_147:
L_yakc_145:
	mov	sp, bp
	pop	bp
	ret
L_yakc_143:
	push	bp
	mov	bp, sp
	jmp	L_yakc_144
	ALIGN	2
YKTickCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKsave:
	TIMES	2 db 0
YKrestore:
	TIMES	2 db 0
YKqueueCount:
	TIMES	2 db 0
YKsemCount:
	TIMES	2 db 0
YKtaskCount:
	TIMES	2 db 0
YKeventCount:
	TIMES	2 db 0
YKRunFlag:
	TIMES	2 db 0
YKIsrDepth:
	TIMES	2 db 0
YKIdleVar:
	TIMES	2 db 0
readyHead:
	TIMES	2 db 0
blockedHead:
	TIMES	2 db 0
blockedTail:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKtasks:
	TIMES	140 db 0
YKqueues:
	TIMES	42 db 0
YKevents:
	TIMES	36 db 0
YKsemaphores:
	TIMES	60 db 0
YKIdleStk:
	TIMES	512 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
slotOr:
	DW	0,0,0,3,1
	DW	2,1,3,0,2
slotColumn:
	DW	1,4,0,0,5
	DW	2,2,3,3,5
slotLrow:
	DW	56,7,48,32,3
	DW	8,24,4,6,1
slotUrow:
	DW	0,0,32,48,1
	DW	24,8,6,4,3
L_lab8app_1:
	DB	0xA,0xD,"Game Over!",0xA,0xD,0
	ALIGN	2
SMgameOverHdlr:
	; >>>>> Line:	41
	; >>>>> void SMgameOverHdlr(void){ 
	jmp	L_lab8app_2
L_lab8app_3:
	; >>>>> Line:	42
	; >>>>> printString("\n\rGam 
	mov	ax, L_lab8app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_lab8app_2:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_3
L_lab8app_5:
	DB	0xA,0xD,"PieceQ overflow!",0xA,0xD,0
	ALIGN	2
SMnewpieceHdlr:
	; >>>>> Line:	46
	; >>>>> void SMnewpieceHdlr(void){ 
	jmp	L_lab8app_6
L_lab8app_7:
	; >>>>> Line:	47
	; >>>>> pieceArray[pieceNext].pieceID = NewPieceID; 
	mov	ax, word [pieceNext]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, pieceArray
	mov	ax, word [NewPieceID]
	mov	word [si], ax
	; >>>>> Line:	48
	; >>>>> pieceArray[pieceNext].type = NewPieceType; 
	mov	ax, word [pieceNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	mov	si, ax
	add	si, 2
	mov	ax, word [NewPieceType]
	mov	word [si], ax
	; >>>>> Line:	49
	; >>>>> pieceArray[pieceNext].orientation = NewPieceOrientation; 
	mov	ax, word [pieceNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	mov	si, ax
	add	si, 4
	mov	ax, word [NewPieceOrientation]
	mov	word [si], ax
	; >>>>> Line:	50
	; >>>>> pieceArray[pieceNext].column = NewPieceColumn; 
	mov	ax, word [pieceNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	mov	si, ax
	add	si, 6
	mov	ax, word [NewPieceColumn]
	mov	word [si], ax
	; >>>>> Line:	52
	; >>>>> if (YKQPost(pieceQPtr, (void *) &(pieceArray[pieceNext])) == 0) 
	mov	ax, word [pieceNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	push	ax
	push	word [pieceQPtr]
	call	YKQPost
	add	sp, 4
	test	ax, ax
	jne	L_lab8app_8
	; >>>>> Line:	53
	; >>>>> printString("\n\rPieceQ overflow!\n\r"); 
	mov	ax, L_lab8app_5
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab8app_9
L_lab8app_8:
	; >>>>> Line:	54
	; >>>>> else if (++pieceNext >= 10) 
	mov	ax, word [pieceNext]
	inc	ax
	mov	word [pieceNext], ax
	cmp	ax, 10
	jb	L_lab8app_10
	; >>>>> Line:	55
	; >>>>> pieceNext = 0; 
	mov	word [pieceNext], 0
L_lab8app_10:
L_lab8app_9:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_6:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_7
	ALIGN	2
SMrecievedCmdHdlr:
	; >>>>> Line:	58
	; >>>>> void SMrecievedCmdHdlr(void){ 
	jmp	L_lab8app_12
L_lab8app_13:
	; >>>>> Line:	59
	; >>>>> YKSemPost(SemPtr); 
	push	word [SemPtr]
	call	YKSemPost
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_lab8app_12:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_13
	ALIGN	2
getCmds:
	; >>>>> Line:	63
	; >>>>> mdNum = cmdNum + (-1*(tmpCmd.slide1)); 
	jmp	L_lab8app_15
L_lab8app_16:
	; >>>>> Line:	68
	; >>>>> rotation = piece->orientation; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	69
	; >>>>> column = piece->column; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	70
	; >>>>> cmdNum = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	71
	; >>>>> tmpCmd.slide1 = 0; 
	mov	word [(2+tmpCmd)], 0
	; >>>>> Line:	72
	; >>>>> tmpCmd.slide2 = 0; 
	mov	word [(6+tmpCmd)], 0
	; >>>>> Line:	74
	; >>>>> while (rotation != slotOr[slotNum]){ 
	jmp	L_lab8app_18
L_lab8app_17:
	; >>>>> Line:	75
	; >>>>> cmdNum++; 
	inc	word [bp-2]
	; >>>>> Line:	76
	; >>>>> if (rotation == 0) { rotation = 3;} 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_20
	; >>>>> Line:	76
	; >>>>> if (rotation == 0) { rotation = 3;} 
	mov	word [bp-6], 3
	jmp	L_lab8app_21
L_lab8app_20:
	; >>>>> Line:	77
	; >>>>> else {rotation--;} 
	dec	word [bp-6]
L_lab8app_21:
L_lab8app_18:
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, slotOr
	mov	ax, word [bp-6]
	cmp	ax, word [si]
	jne	L_lab8app_17
L_lab8app_19:
	; >>>>> Line:	79
	; >>>>> if (cmdNum > 2){ 
	cmp	word [bp-2], 2
	jbe	L_lab8app_22
	; >>>>> Line:	80
	; >>>>> cmdNum = 1; 
	mov	word [bp-2], 1
	; >>>>> Line:	81
	; >>>>> tmpCmd.rotate = -1; 
	mov	word [(4+tmpCmd)], -1
	jmp	L_lab8app_23
L_lab8app_22:
	; >>>>> Line:	84
	; >>>>> tmpCmd.rotate = cmdNum; 
	mov	ax, word [bp-2]
	mov	word [(4+tmpCmd)], ax
L_lab8app_23:
	; >>>>> Line:	87
	; >>>>> tmpCmd.slide2 = 0; 
	mov	word [(6+tmpCmd)], 0
	; >>>>> Line:	88
	; >>>>> tmpCmd.slide1 = (slotColumn[slotNum])-column; 
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, slotColumn
	mov	ax, word [si]
	sub	ax, word [bp-4]
	mov	word [(2+tmpCmd)], ax
	; >>>>> Line:	89
	; >>>>> if (tmpCmd.slide1 < 0){ 
	cmp	word [(2+tmpCmd)], 0
	jge	L_lab8app_24
	; >>>>> Line:	90
	; >>>>> cmdNum = cmdNum + (-1*(tmpCmd.slide1)); 
	mov	ax, word [(2+tmpCmd)]
	mov	cx, -1
	imul	cx
	add	ax, word [bp-2]
	mov	word [bp-2], ax
	jmp	L_lab8app_25
L_lab8app_24:
	; >>>>> Line:	93
	; >>>>> cmdNum = cmdNum + tmpCmd.slide1; 
	mov	ax, word [(2+tmpCmd)]
	add	ax, word [bp-2]
	mov	word [bp-2], ax
L_lab8app_25:
	; >>>>> Line:	96
	; >>>>> if (tmpCmd.rotate != 0){ 
	mov	ax, word [(4+tmpCmd)]
	test	ax, ax
	je	L_lab8app_26
	; >>>>> Line:	97
	; >>>>> if (slotColumn[slotNum] == 0) { 
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, slotColumn
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_27
	; >>>>> Line:	98
	; >>>>> if (column == 0) { 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_28
	; >>>>> Line:	99
	; >>>>> tmpCmd.slide1 = 1; 
	mov	word [(2+tmpCmd)], 1
	; >>>>> Line:	100
	; >>>>> tmpCmd.slide2 = -1; 
	mov	word [(6+tmpCmd)], -1
	; >>>>> Line:	101
	; >>>>> cmdNum = cmdNum +2; 
	mov	ax, word [bp-2]
	add	ax, 2
	mov	word [bp-2], ax
	jmp	L_lab8app_29
L_lab8app_28:
	; >>>>> Line:	103
	; >>>>> else if (column == 5) { 
	cmp	word [bp-4], 5
	jne	L_lab8app_30
	; >>>>> Line:	104
	; >>>>> tmpCmd.slide1 = -1; 
	mov	word [(2+tmpCmd)], -1
	; >>>>> Line:	105
	; >>>>> tmpCmd.slide2 = -4; 
	mov	word [(6+tmpCmd)], -4
	jmp	L_lab8app_31
L_lab8app_30:
	; >>>>> Line:	109
	; >>>>> tmpCmd.slide2 = tmpCmd.slide1; 
	mov	ax, word [(2+tmpCmd)]
	mov	word [(6+tmpCmd)], ax
	; >>>>> Line:	110
	; >>>>> tmpCmd.slide1 = 0; 
	mov	word [(2+tmpCmd)], 0
L_lab8app_31:
L_lab8app_29:
L_lab8app_27:
	; >>>>> Line:	113
	; >>>>> if (slotColumn[slotNum] == 5) { 
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, slotColumn
	cmp	word [si], 5
	jne	L_lab8app_32
	; >>>>> Line:	114
	; >>>>> if (column == 0) { 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_33
	; >>>>> Line:	115
	; >>>>> tmpCmd.slide1 = 1; 
	mov	word [(2+tmpCmd)], 1
	; >>>>> Line:	116
	; >>>>> tmpCmd.slide2 = 4; 
	mov	word [(6+tmpCmd)], 4
	jmp	L_lab8app_34
L_lab8app_33:
	; >>>>> Line:	118
	; >>>>> else if (column == 5) { 
	cmp	word [bp-4], 5
	jne	L_lab8app_35
	; >>>>> Line:	119
	; >>>>> tmpCmd.slide1 = - 
	mov	word [(2+tmpCmd)], -1
	; >>>>> Line:	120
	; >>>>> tmpCmd.slide2 = 1; 
	mov	word [(6+tmpCmd)], 1
	; >>>>> Line:	121
	; >>>>> cmdNum = cmdNum +2; 
	mov	ax, word [bp-2]
	add	ax, 2
	mov	word [bp-2], ax
	jmp	L_lab8app_36
L_lab8app_35:
	; >>>>> Line:	125
	; >>>>> tmpCmd.slide2 = tmpCmd.slide1; 
	mov	ax, word [(2+tmpCmd)]
	mov	word [(6+tmpCmd)], ax
	; >>>>> Line:	126
	; >>>>> tmpCmd.slide1 = 0; 
	mov	word [(2+tmpCmd)], 0
L_lab8app_36:
L_lab8app_34:
L_lab8app_32:
L_lab8app_26:
	; >>>>> Line:	131
	; >>>>> return cmdNum; 
	mov	ax, word [bp-2]
L_lab8app_37:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_15:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_lab8app_16
L_lab8app_41:
	DB	0xA,0xD,"cmdQ overflow!",0xA,0xD,0
L_lab8app_40:
	DB	0xA,0xD,"Default hit (corner piece)",0xA,0xD,0
L_lab8app_39:
	DB	0xA,0xD,"Default hit (straight piece)",0xA,0xD,0
	ALIGN	2
SMpieceTask:
	; >>>>> Line:	135
	; >>>>> void SMpieceTask(void) { 
	jmp	L_lab8app_42
L_lab8app_43:
	; >>>>> Line:	143
	; >>>>> SeedSimptris(10947); 
	mov	ax, 10947
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	144
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	145
	; >>>>> while(1) { 
	jmp	L_lab8app_45
L_lab8app_44:
	; >>>>> Line:	146
	; >>>>> ptemp = (struct SMpiece*) YKQPend(pieceQPtr); 
	push	word [pieceQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	149
	; >>>>> if (ptemp->type == 1) { 
	mov	si, word [bp-2]
	add	si, 2
	cmp	word [si], 1
	jne	L_lab8app_47
	; >>>>> Line:	150
	; >>>>> if (lowerRow == 0) { 
	mov	ax, word [lowerRow]
	test	ax, ax
	jne	L_lab8app_48
	; >>>>> Line:	151
	; >>>>> tCmdNum = getCmds(ptemp, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	getCmds
	add	sp, 4
	mov	word [bp-10], ax
	; >>>>> Line:	152
	; >>>>> if (getCmds(ptemp, 1) < tCmdN 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	getCmds
	add	sp, 4
	mov	dx, word [bp-10]
	cmp	dx, ax
	jle	L_lab8app_49
	; >>>>> Line:	153
	; >>>>> destSlot = 1; 
	mov	word [bp-4], 1
	jmp	L_lab8app_50
L_lab8app_49:
	; >>>>> Line:	156
	; >>>>> destSlot = 0; 
	mov	word [bp-4], 0
L_lab8app_50:
	jmp	L_lab8app_51
L_lab8app_48:
	; >>>>> Line:	159
	; >>>>> else if ((lowerRow & 0x38) == 0) {destSlot = 0;} 
	mov	ax, word [lowerRow]
	and	ax, 56
	jne	L_lab8app_52
	; >>>>> Line:	159
	; >>>>> else if ((lowerRow & 0x38) == 0) {destSlot = 0;} 
	mov	word [bp-4], 0
	jmp	L_lab8app_53
L_lab8app_52:
	; >>>>> Line:	160
	; >>>>> else if ((lowerRow & 0x07) == 0) {destSlot = 1;} 
	mov	ax, word [lowerRow]
	and	ax, 7
	jne	L_lab8app_54
	; >>>>> Line:	160
	; >>>>> else if ((lowerRow & 0x07) == 0) {destSlot = 1;} 
	mov	word [bp-4], 1
	jmp	L_lab8app_55
L_lab8app_54:
	; >>>>> Line:	161
	; >>>>> else if ((lowerRow & 0x38) == 0x38) {destSlot = 0;} 
	mov	ax, word [lowerRow]
	and	ax, 56
	cmp	ax, 56
	jne	L_lab8app_56
	; >>>>> Line:	161
	; >>>>> else if ((lowerRow & 0x38) == 0x38) {destSlot = 0;} 
	mov	word [bp-4], 0
	jmp	L_lab8app_57
L_lab8app_56:
	; >>>>> Line:	162
	; >>>>> else if ((lowerRow & 0x07) == 0x07) {destSlot = 1;} 
	mov	ax, word [lowerRow]
	and	ax, 7
	cmp	ax, 7
	jne	L_lab8app_58
	; >>>>> Line:	162
	; >>>>> else if ((lowerRow & 0x07) == 0x07) {destSlot = 1;} 
	mov	word [bp-4], 1
	jmp	L_lab8app_59
L_lab8app_58:
	; >>>>> Line:	164
	; >>>>> printString("\n\rDefault hit (straight piece)\n\r"); 
	mov	ax, L_lab8app_39
	push	ax
	call	printString
	add	sp, 2
L_lab8app_59:
L_lab8app_57:
L_lab8app_55:
L_lab8app_53:
L_lab8app_51:
	; >>>>> Line:	167
	; >>>>> tCmdNum = getCmds(ptemp, destSlot); 
	push	word [bp-4]
	push	word [bp-2]
	call	getCmds
	add	sp, 4
	mov	word [bp-10], ax
	; >>>>> Line:	170
	; >>>>> if ((upperRow | slotLrow[destSlot]) == upperRow) { 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	si, ax
	add	si, slotLrow
	mov	ax, word [si]
	or	ax, word [upperRow]
	mov	dx, word [upperRow]
	cmp	dx, ax
	jne	L_lab8app_60
	; >>>>> Line:	171
	; >>>>> if (destSlot == 0) { leftBlock++; } 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_lab8app_61
	; >>>>> Line:	171
	; >>>>> if (destSlot == 0) { leftBlock++; } 
	inc	word [leftBlock]
	jmp	L_lab8app_62
L_lab8app_61:
	; >>>>> Line:	172
	; >>>>> mds(ptemp, 4); 
	inc	word [rightBlock]
L_lab8app_62:
	jmp	L_lab8app_63
L_lab8app_60:
	; >>>>> Line:	174
	; >>>>> else if ((lowerRow | slotLrow[destSlot]) == lowerRow) { 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	si, ax
	add	si, slotLrow
	mov	ax, word [si]
	or	ax, word [lowerRow]
	mov	dx, word [lowerRow]
	cmp	dx, ax
	jne	L_lab8app_64
	; >>>>> Line:	175
	; >>>>> upperRow = upperRow | slotLrow[destSlot]; 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	si, ax
	add	si, slotLrow
	mov	ax, word [si]
	or	ax, word [upperRow]
	mov	word [upperRow], ax
	jmp	L_lab8app_65
L_lab8app_64:
	; >>>>> Line:	178
	; >>>>> lowerRow = lowerRow | slotLrow[destSlot]; 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	si, ax
	add	si, slotLrow
	mov	ax, word [si]
	or	ax, word [lowerRow]
	mov	word [lowerRow], ax
L_lab8app_65:
L_lab8app_63:
	jmp	L_lab8app_66
L_lab8app_47:
	; >>>>> Line:	184
	; >>>>> if (lowerRow == 0) { 
	mov	ax, word [lowerRow]
	test	ax, ax
	jne	L_lab8app_67
	; >>>>> Line:	185
	; >>>>> minCmdNum = 20; 
	mov	word [bp-8], 20
	; >>>>> Line:	186
	; >>>>> k = 2; 
	mov	word [bp-14], 2
	; >>>>> Line:	187
	; >>>>> while (k < 5){ 
	jmp	L_lab8app_69
L_lab8app_68:
	; >>>>> Line:	188
	; >>>>> tCmdNum = getCmds(ptemp, k); 
	push	word [bp-14]
	push	word [bp-2]
	call	getCmds
	add	sp, 4
	mov	word [bp-10], ax
	; >>>>> Line:	189
	; >>>>> if (tCmdNum < minCmdNum){ 
	mov	ax, word [bp-8]
	cmp	ax, word [bp-10]
	jle	L_lab8app_71
	; >>>>> Line:	190
	; >>>>> minCmdNum = tCmdNum; 
	mov	ax, word [bp-10]
	mov	word [bp-8], ax
	; >>>>> Line:	191
	; >>>>> minSlot = k; 
	mov	ax, word [bp-14]
	mov	word [bp-6], ax
L_lab8app_71:
	; >>>>> Line:	193
	; >>>>> k = k+2; 
	mov	ax, word [bp-14]
	add	ax, 2
	mov	word [bp-14], ax
L_lab8app_69:
	cmp	word [bp-14], 5
	jl	L_lab8app_68
L_lab8app_70:
	; >>>>> Line:	195
	; >>>>> destSlot = minSlot; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	jmp	L_lab8app_72
L_lab8app_67:
	; >>>>> Line:	197
	; >>>>> else if (lowerRow == 0x38) { 
	cmp	word [lowerRow], 56
	jne	L_lab8app_73
	; >>>>> Line:	198
	; >>>>> tCmdNum = getCmds(ptemp, 4); 
	mov	ax, 4
	push	ax
	push	word [bp-2]
	call	getCmds
	add	sp, 4
	mov	word [bp-10], ax
	; >>>>> Line:	199
	; >>>>> Sl 
	mov	word [bp-4], 4
	jmp	L_lab8app_74
L_lab8app_73:
	; >>>>> Line:	201
	; >>>>> else if (lowerRow == 0x07) { 
	cmp	word [lowerRow], 7
	jne	L_lab8app_75
	; >>>>> Line:	202
	; >>>>> tCmdNum = getCmds(ptemp, 2); 
	mov	ax, 2
	push	ax
	push	word [bp-2]
	call	getCmds
	add	sp, 4
	mov	word [bp-10], ax
	; >>>>> Line:	203
	; >>>>> destSlot = 2; 
	mov	word [bp-4], 2
	jmp	L_lab8app_76
L_lab8app_75:
	; >>>>> Line:	205
	; >>>>> else if ((lowerRow & 0x38) == 0x30) {destSlot = 5;} 
	mov	ax, word [lowerRow]
	and	ax, 56
	cmp	ax, 48
	jne	L_lab8app_77
	; >>>>> Line:	205
	; >>>>> else if ((lowerRow & 0x38) == 0x30) {destSlot = 5;} 
	mov	word [bp-4], 5
	jmp	L_lab8app_78
L_lab8app_77:
	; >>>>> Line:	206
	; >>>>> else if ((lowerRow & 0x07) == 0x03) {destSlot = 7;} 
	mov	ax, word [lowerRow]
	and	ax, 7
	cmp	ax, 3
	jne	L_lab8app_79
	; >>>>> Line:	206
	; >>>>> else if ((lowerRow & 0x07) == 0x03) {destSlot = 7;} 
	mov	word [bp-4], 7
	jmp	L_lab8app_80
L_lab8app_79:
	; >>>>> Line:	207
	; >>>>> else if ((lowerRow & 0x38) == 0x18) {destSlot = 3;} 
	mov	ax, word [lowerRow]
	and	ax, 56
	cmp	ax, 24
	jne	L_lab8app_81
	; >>>>> Line:	207
	; >>>>> else if ((lowerRow & 0x38) == 0x18) {destSlot = 3;} 
	mov	word [bp-4], 3
	jmp	L_lab8app_82
L_lab8app_81:
	; >>>>> Line:	208
	; >>>>> else if ((lowerRow & 0x07) == 0x06) {destSlot = 9;} 
	mov	ax, word [lowerRow]
	and	ax, 7
	cmp	ax, 6
	jne	L_lab8app_83
	; >>>>> Line:	208
	; >>>>> else if ((lowerRow & 0x07) == 0x06) {destSlot = 9;} 
	mov	word [bp-4], 9
	jmp	L_lab8app_84
L_lab8app_83:
	; >>>>> Line:	209
	; >>>>> else { printString("\n\rDefault hit (corner piece)\n\r");} 
	mov	ax, L_lab8app_40
	push	ax
	call	printString
	add	sp, 2
L_lab8app_84:
L_lab8app_82:
L_lab8app_80:
L_lab8app_78:
L_lab8app_76:
L_lab8app_74:
L_lab8app_72:
	; >>>>> Line:	211
	; >>>>> tCmdNum = getCmds(ptemp, destSlot); 
	push	word [bp-4]
	push	word [bp-2]
	call	getCmds
	add	sp, 4
	mov	word [bp-10], ax
	; >>>>> Line:	213
	; >>>>> lowerRow = lowerRow | slotLrow[destSlot]; 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	si, ax
	add	si, slotLrow
	mov	ax, word [si]
	or	ax, word [lowerRow]
	mov	word [lowerRow], ax
	; >>>>> Line:	214
	; >>>>> upperRow = upperRow | slotUrow[destSl 
	mov	ax, word [bp-4]
	shl	ax, 1
	mov	si, ax
	add	si, slotUrow
	mov	ax, word [si]
	or	ax, word [upperRow]
	mov	word [upperRow], ax
L_lab8app_66:
	; >>>>> Line:	217
	; >>>>> for (k = 0; k < 2; k ++) { 
	mov	word [bp-14], 0
	jmp	L_lab8app_86
L_lab8app_85:
	; >>>>> Line:	218
	; >>>>> if (lowerRow == 0x3F) { 
	cmp	word [lowerRow], 63
	jne	L_lab8app_89
	; >>>>> Line:	219
	; >>>>> lowerRow = upperRow; 
	mov	ax, word [upperRow]
	mov	word [lowerRow], ax
	; >>>>> Line:	220
	; >>>>> upperRow = 0; 
	mov	word [upperRow], 0
	; >>>>> Line:	221
	; >>>>> if (rightBlock > 0) { 
	mov	ax, word [rightBlock]
	test	ax, ax
	je	L_lab8app_90
	; >>>>> Line:	222
	; >>>>> rightBlock--; 
	dec	word [rightBlock]
	; >>>>> Line:	223
	; >>>>> upperRow = 0x07; 
	mov	word [upperRow], 7
	jmp	L_lab8app_91
L_lab8app_90:
	; >>>>> Line:	225
	; >>>>> else if (leftBlock > 0) { 
	mov	ax, word [leftBlock]
	test	ax, ax
	je	L_lab8app_92
	; >>>>> Line:	226
	; >>>>> leftBlock--; 
	dec	word [leftBlock]
	; >>>>> Line:	227
	; >>>>> upperRow = 0x38; 
	mov	word [upperRow], 56
L_lab8app_92:
L_lab8app_91:
L_lab8app_89:
L_lab8app_88:
	inc	word [bp-14]
L_lab8app_86:
	cmp	word [bp-14], 2
	jl	L_lab8app_85
L_lab8app_87:
	; >>>>> Line:	231
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	250
	; >>>>> cmdArray[cmdNext].pieceID = ptemp->pieceID; 
	mov	si, word [bp-2]
	mov	ax, word [cmdNext]
	mov	cx, 3
	shl	ax, cl
	mov	di, ax
	add	di, cmdArray
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	251
	; >>>>> cmdArray[cmdNext].slide1 = tmpCmd.slide1; 
	mov	ax, word [cmdNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, cmdArray
	mov	si, ax
	add	si, 2
	mov	ax, word [(2+tmpCmd)]
	mov	word [si], ax
	; >>>>> Line:	252
	; >>>>> cmdArray[cmdNext].rotate = tmpCmd.rotate; 
	mov	ax, word [cmdNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, cmdArray
	mov	si, ax
	add	si, 4
	mov	ax, word [(4+tmpCmd)]
	mov	word [si], ax
	; >>>>> Line:	253
	; >>>>> cmdArray[cmdNext].slide2 = tmpCmd.slide2; 
	mov	ax, word [cmdNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, cmdArray
	mov	si, ax
	add	si, 6
	mov	ax, word [(6+tmpCmd)]
	mov	word [si], ax
	; >>>>> Line:	254
	; >>>>> if (YKQPost(cmdQPtr, (void *) 
	mov	ax, word [cmdNext]
	mov	cx, 3
	shl	ax, cl
	add	ax, cmdArray
	push	ax
	push	word [cmdQPtr]
	call	YKQPost
	add	sp, 4
	test	ax, ax
	jne	L_lab8app_93
	; >>>>> Line:	255
	; >>>>> printString("\n\rcmdQ overflow!\n\r"); 
	mov	ax, L_lab8app_41
	push	ax
	call	printString
	add	sp, 2
	jmp	L_lab8app_94
L_lab8app_93:
	; >>>>> Line:	256
	; >>>>> else if (++cmdNext >= 10) 
	mov	ax, word [cmdNext]
	inc	ax
	mov	word [cmdNext], ax
	cmp	ax, 10
	jb	L_lab8app_95
	; >>>>> Line:	257
	; >>>>> cmdNext = 0; 
	mov	word [cmdNext], 0
L_lab8app_95:
L_lab8app_94:
	; >>>>> Line:	258
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab8app_45:
	jmp	L_lab8app_44
L_lab8app_46:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_42:
	push	bp
	mov	bp, sp
	sub	sp, 14
	jmp	L_lab8app_43
	ALIGN	2
SMcmdTask:
	; >>>>> Line:	264
	; >>>>> void SMcmdTask(void) { 
	jmp	L_lab8app_97
L_lab8app_98:
	; >>>>> Line:	270
	; >>>>> while(1) { 
	jmp	L_lab8app_100
L_lab8app_99:
	; >>>>> Line:	271
	; >>>>> ctemp = (struct SMcmd*) YKQPend(cmdQPtr); 
	push	word [cmdQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	272
	; >>>>> if (ctemp->slide1 != 0){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_102
	; >>>>> Line:	273
	; >>>>> slide = ctemp->slide1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	274
	; >>>>> if (slide > 0) {direction = 1;} 
	cmp	word [bp-6], 0
	jle	L_lab8app_103
	; >>>>> Line:	274
	; >>>>> if (slide > 0) {direction = 1;} 
	mov	word [bp-8], 1
	jmp	L_lab8app_104
L_lab8app_103:
	; >>>>> Line:	276
	; >>>>> direction = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	277
	; >>>>> slide = -1*slide; 
	mov	ax, word [bp-6]
	mov	cx, -1
	imul	cx
	mov	word [bp-6], ax
L_lab8app_104:
	; >>>>> Line:	279
	; >>>>> for (k = 0; k < slide; k++){ 
	mov	word [bp-4], 0
	jmp	L_lab8app_106
L_lab8app_105:
	; >>>>> Line:	280
	; >>>>> YKSemPend(SemPtr); 
	push	word [SemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	281
	; >>>>> SlidePiece(ctemp 
	push	word [bp-8]
	mov	si, word [bp-2]
	push	word [si]
	call	SlidePiece
	add	sp, 4
L_lab8app_108:
	inc	word [bp-4]
L_lab8app_106:
	mov	ax, word [bp-6]
	cmp	ax, word [bp-4]
	jg	L_lab8app_105
L_lab8app_107:
L_lab8app_102:
	; >>>>> Line:	284
	; >>>>> if (ctemp->rotate != 0){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_109
	; >>>>> Line:	285
	; >>>>> rotate = ctemp->rotate; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-10], ax
	; >>>>> Line:	286
	; >>>>> if (rotate > 0) {direction = 1;} 
	cmp	word [bp-10], 0
	jle	L_lab8app_110
	; >>>>> Line:	286
	; >>>>> if (rotate > 0) {direction = 1;} 
	mov	word [bp-8], 1
	jmp	L_lab8app_111
L_lab8app_110:
	; >>>>> Line:	288
	; >>>>> direction = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	289
	; >>>>> rotate = -1*rotate; 
	mov	ax, word [bp-10]
	mov	cx, -1
	imul	cx
	mov	word [bp-10], ax
L_lab8app_111:
	; >>>>> Line:	291
	; >>>>> for (k = 0; k < rotate; k++){ 
	mov	word [bp-4], 0
	jmp	L_lab8app_113
L_lab8app_112:
	; >>>>> Line:	292
	; >>>>> YKSemPend(SemPtr); 
	push	word [SemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	293
	; >>>>> RotatePiece(ctemp->pieceID, direction); 
	push	word [bp-8]
	mov	si, word [bp-2]
	push	word [si]
	call	RotatePiece
	add	sp, 4
L_lab8app_115:
	inc	word [bp-4]
L_lab8app_113:
	mov	ax, word [bp-10]
	cmp	ax, word [bp-4]
	jg	L_lab8app_112
L_lab8app_114:
L_lab8app_109:
	; >>>>> Line:	296
	; >>>>> if (ctemp->slide2 != 0){ 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_116
	; >>>>> Line:	297
	; >>>>> slide = ctemp->slide2; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	298
	; >>>>> if (slide > 0) {direction = 1;} 
	cmp	word [bp-6], 0
	jle	L_lab8app_117
	; >>>>> Line:	298
	; >>>>> if (slide > 0) {direction = 1;} 
	mov	word [bp-8], 1
	jmp	L_lab8app_118
L_lab8app_117:
	; >>>>> Line:	300
	; >>>>> direction = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	301
	; >>>>> slide = -1*slide; 
	mov	ax, word [bp-6]
	mov	cx, -1
	imul	cx
	mov	word [bp-6], ax
L_lab8app_118:
	; >>>>> Line:	303
	; >>>>> for (k = 0; k < slide; k++){ 
	mov	word [bp-4], 0
	jmp	L_lab8app_120
L_lab8app_119:
	; >>>>> Line:	304
	; >>>>> YKSemPend(SemPtr); 
	push	word [SemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	305
	; >>>>> SlidePiece(cte 
	push	word [bp-8]
	mov	si, word [bp-2]
	push	word [si]
	call	SlidePiece
	add	sp, 4
L_lab8app_122:
	inc	word [bp-4]
L_lab8app_120:
	mov	ax, word [bp-6]
	cmp	ax, word [bp-4]
	jg	L_lab8app_119
L_lab8app_121:
L_lab8app_116:
L_lab8app_100:
	jmp	L_lab8app_99
L_lab8app_101:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_97:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab8app_98
L_lab8app_128:
	DB	">",0xD,0xA,0
L_lab8app_127:
	DB	", CPU: ",0
L_lab8app_126:
	DB	"<CS: ",0
L_lab8app_125:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab8app_124:
	DB	"Starting Simtris",0xD,0xA,0
	ALIGN	2
SMStatTask:
	; >>>>> Line:	313
	; >>>>> { 
	jmp	L_lab8app_129
L_lab8app_130:
	; >>>>> Line:	317
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	318
	; >>>>> printString("Starting Simtris\r\n"); 
	mov	ax, L_lab8app_124
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	319
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab8app_125
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	320
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	321
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	322
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	323
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	324
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	326
	; >>>>> YKNewTask(SMcmdTask, (void *) &SMcmdTaskStk[512], 1); 
	mov	al, 1
	push	ax
	mov	ax, (SMcmdTaskStk+1024)
	push	ax
	mov	ax, SMcmdTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	327
	; >>>>> YKNewTask(SMpieceTask, (void *) &SMpieceTaskStk[512], 2); 
	mov	al, 2
	push	ax
	mov	ax, (SMpieceTaskStk+1024)
	push	ax
	mov	ax, SMpieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	329
	; >>>>> while (1) 
	jmp	L_lab8app_132
L_lab8app_131:
	; >>>>> Line:	331
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	333
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	334
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	335
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	337
	; >>>>> printString("<CS: "); 
	mov	ax, L_lab8app_126
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	338
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	339
	; >>>>> printString(", CPU: "); 
	mov	ax, L_lab8app_127
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	340
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	341
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	342
	; >>>>> printString(">\r\n"); 
	mov	ax, L_lab8app_128
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	344
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	345
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	346
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab8app_132:
	jmp	L_lab8app_131
L_lab8app_133:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_129:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_130
L_lab8app_135:
	DB	"PSem",0
	ALIGN	2
main:
	; >>>>> Line:	351
	; >>>>> { 
	jmp	L_lab8app_136
L_lab8app_137:
	; >>>>> Line:	352
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	353
	; >>>>> pieceNext = 0; 
	mov	word [pieceNext], 0
	; >>>>> Line:	354
	; >>>>> cmdNext = 0; 
	mov	word [cmdNext], 0
	; >>>>> Line:	355
	; >>>>> rightBlock = 0; 
	mov	word [rightBlock], 0
	; >>>>> Line:	356
	; >>>>> leftBlock = 0; 
	mov	word [leftBlock], 0
	; >>>>> Line:	357
	; >>>>> upperRow = 0; 
	mov	word [upperRow], 0
	; >>>>> Line:	358
	; >>>>> lowerRow = 0; 
	mov	word [lowerRow], 0
	; >>>>> Line:	359
	; >>>>> score = 0; 
	mov	word [score], 0
	; >>>>> Line:	360
	; >>>>>  
	mov	ax, 10
	push	ax
	mov	ax, pieceQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [pieceQPtr], ax
	; >>>>> Line:	361
	; >>>>> cmdQPtr = YKQCreate(cmdQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, cmdQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [cmdQPtr], ax
	; >>>>> Line:	362
	; >>>>> SemPtr = YKSemCreate(1, "PSem"); 
	mov	ax, L_lab8app_135
	push	ax
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 4
	mov	word [SemPtr], ax
	; >>>>> Line:	363
	; >>>>> YKNewTask(SMStatTask, (void *) &SMStatTaskStk[512], 0); 
	xor	al, al
	push	ax
	mov	ax, (SMStatTaskStk+1024)
	push	ax
	mov	ax, SMStatTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	364
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_136:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_137
	ALIGN	2
pieceArray:
	TIMES	80 db 0
cmdArray:
	TIMES	80 db 0
pieceQ:
	TIMES	20 db 0
cmdQ:
	TIMES	20 db 0
pieceQPtr:
	TIMES	2 db 0
cmdQPtr:
	TIMES	2 db 0
SemPtr:
	TIMES	2 db 0
SMcmdTaskStk:
	TIMES	1024 db 0
SMpieceTaskStk:
	TIMES	1024 db 0
SMStatTaskStk:
	TIMES	1024 db 0
rightBlock:
	TIMES	2 db 0
leftBlock:
	TIMES	2 db 0
upperRow:
	TIMES	2 db 0
lowerRow:
	TIMES	2 db 0
pieceNext:
	TIMES	2 db 0
cmdNext:
	TIMES	2 db 0
score:
	TIMES	2 db 0
tmpCmd:
	TIMES	8 db 0
